I used 3 files: one for the scheduler thread, one for the worker threads that executed the doWork() function, and a main file to organize everything. A timer object from main is used to regulate the scheduler thread and have it operate at a fixed interval. The scheduler then runs the corresponding threads depending on what time in the 16 period interval it is. If the thread is currently running, it gets skipped and the worker thread logs the miss. If the thread isn't currently running, the scheduler thread unlocks its semaphore and allows the worker thread to run. The worker thread locks the semaphore, executes doWork() however many times, logs a successful run, and unlocks the semaphore. This process repeats until the program is finished, and each worker thread prints how many successful runs and overruns occurred.